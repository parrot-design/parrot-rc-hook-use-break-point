!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).ParrotRcHookUsebreakpoint=t(e.React)}(this,(function(e){"use strict";const t={xs:"(max-width: 575px)",sm:"(min-width: 576px) and (max-width:767px)",md:"(min-width: 768px) and (max-width:991px)",lg:"(min-width: 992px) and (max-width:1199px)",xl:"(min-width: 1200px) and (max-width:1599px)",xxl:"(min-width: 1600px)"},s=new Map;let i=-1,n={},r={};["xs","sm","md","lg","xl","xxl"].forEach((e=>{r[e]=!1}));const a={matchHandlers:{},dispatch:e=>(n=e,s.forEach((e=>e(n))),s.size>=1),subscribe(e){return s.size||this.register(),i+=1,s.set(i,e),e(n),i},unsubscribe(e){s.delete(e),s.size||this.unregister()},unregister(){Object.keys(t).forEach((e=>{const s=t[e],i=this.matchHandlers[s];null==i||i.mql.removeListener(null==i?void 0:i.listener)})),s.clear()},register(){Object.keys(t).forEach((e=>{const s=t[e],i=({matches:t})=>{t&&this.dispatch(Object.assign(Object.assign({},r),{[e]:t}))},n=window.matchMedia(s);n.addListener(i),this.matchHandlers[s]={mql:n,listener:i},i(n)}))}};return function(){const[t,s]=e.useState({});return e.useEffect((()=>{const e=a.subscribe((e=>{s(e)}));return()=>a.unsubscribe(e)}),[]),t}}));
